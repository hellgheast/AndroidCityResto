-- Ajout de la clé standard dans le manifest
-- Ajout dans le xml du layout de l'activité le fragment FragmentMaps
-- Ajout des callbacks OnMapReady
-- Récupération du MapFragment via un FragmentManager casté
-- Mise en place du listener de callback avec getMapAsync
-- On récupère la map prête dans le callback
-- Deux types d'affichage de Map : MapFragment,MapView
-- Un seul objet qui va bosser avec : GoogleMap
-- Initialisation : Sélection Position,Zoom,Relèvement,Inclinason
-- Paramètres : Type de Map,Choix des bouttons additionnels (Zoom,Boussole),Mouvement fait par le user,litemode ou pas?
-- Paramètres configurables de trois manières :
   via XML (balise map: https://developers.google.com/maps/documentation/android-api/map avec namespace xmlns:map="http://schemas.android.com/apk/res-auto") 
   ou de manière programmatique via l'objet GoogleMapOptions avec MapFragment / MapView
   ou en configuration l'objet GoogleMap via .getUiSettings() //Seule fonctionelle pour le moment
   
-- https://developers.google.com/maps/documentation/android-api/intents Intent avec googlemaps !à voir!

-- Interaction avec la map (GoogleMap)
	++ Controle graphiques (.UiSettings())
		-- Zoom 					UiSettings.setZoomControlsEnabled(boolean).
		-- Boussole 				UiSettings.setCompassEnabled(boolean)
		-- Propre localisation 		Chapitre dédié
    ++ Mouvements
		-- Zoom						UiSettings.setZoomGesturesEnabled(boolean)
		-- Défillement				UiSettings.setScrollGesturesEnabled(boolean).
		-- Inclinaison				UiSettings.setTiltGesturesEnabled(boolean)
		-- Rotation 				UiSettings.setRotateGesturesEnabled(boolean)
	++ Evenements
		-- Click bref sur la map	OnMapClickListener		// GoogleMap.setOnMapClickListener(OnMapClickListener)
		-- Click long sur la map 	OnMapLongClickListener	// GoogleMap.setOnMapLongClickListener(OnMapLongClickListener)
	Il est possible de désactiver les clicks en lite mode via view.setClickable(boolean) || fragment.getView().setClickable(boolean);
		-- Changement Caméra		OnCameraChangeListener  // GoogleMap.setOnCameraChangeListener(OnCameraChangeListener)
	
	++ Caméra et Vue (.moveCamera(CameraUpdateFactory)) https://developers.google.com/maps/documentation/android-api/views
		-- Position  	position sur laquelle est centrée la caméra de la map longitude/latitude
		-- Zoom 		Indique le niveau de zoom	 256 * 2N dp
		-- Orientation 
		-- Angle de vue
		-- Changer la position de la caméra 	CameraUpdate
		-- Change Zoom
			-- Unitaire (Change pas la position de la caméra)
						+ CameraUpdateFactory.zoomIn()
						- CameraUpdateFactory.zoomOut()
			-- Valeur (Change pas la position de la caméra)
						  CameraUpdateFactory.zoomTo(float)
			-- Relatif 
						+/- CameraUpdateFactory.zoomBy(float) 
						+/- CameraUpdateFactory.zoomBy(float, Point) Maintien le centre de la caméra à la position indiquée
		-- Changer position
			-- Position Lat/Lng
						CameraUpdateFactory.newLatLng(LatLng)
			-- Position Lat/Lng avec Zoom 	
						CameraUpdateFactory.newLatLngZoom(LatLng, float)
			--Position de camera !le plus complet avec les quatres paramètres (Position,Zoom,Orientation,Angle de Vue)!
						CameraUpdateFactory.newCameraPosition(CameraPosition) || CameraPosition.Builder
			--Changer Position relative
						CameraUpdateFactory.scrollBy(float, float)
						
		!NO BOUNDARIES!
		
		-- Déplacement avec animation  GoogleMap.animateCamera(cameraUpdate, duration, callback)
			-- Nécéssite le callback  GoogleMap.CancellableCallback
				onFinish() // Si animation finie
				onCancel() // Si animation interrompue
			
	++ Localistion
		// En ayant les permissions requises on peut afficher le bouton de localisation
		mMap.setMyLocationEnabled(true);
		// Quand actif centre sur la position actuelle indiquée par le GPS
		
	++ Markeurs https://developers.google.com/android/reference/com/google/android/gms/maps/model/Marker
		-- Ajout d'un marquer
			.addMarker(new MarkerOptions()
			.position(new LatLng(10, 10))
			.title("Hello world"));
		-- Ajout d'information sur le marquer
			.snippet() // Automatique
			Marker.showInfoWindow // n'est pas automatique
		-- Pour modifier l'aspect graphique de InfoWindows
			--InfoWindowAdapter() qui implémente les deux méthodes
				--  getInfoWindow qui change le contenu de  la windowsinfo
				--   getInfoContents qui change le contenu
		-- Pour réagir aux click sur le windowsinfo on utilise un listener
			GoogleMap.OnInfoWindowClickListener qui contient la méthode
			--  public void onInfoWindowClick(Marker marker)
			